################
YOUR INFO
################
Name1: Aaron Llanos
EID1: al26593
CS login: al26593
Email: al26593@utexas.edu
Unique Number: 53033

Slip days used:

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Tarik Alam
EID1:
CS login:
Email:
Unique Number:

Your partner's ranking (scale below):

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

  2^5

(2) In part 0.3, which flavor of exec did you choose to use?  Why?

  execve() because The execve function loads and runs a new program in the context of the current process. The execve function loads and runs the executable object file filename with the argument list argv and the environment variable list envp. In our case of 0.3, our executable object is /bin/ls and the envp variable holds the psh in the background at the top of the stack so that the ls program can return to it after it is finished. 


################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

    signal() will define a handler that allows the user to make custom edits to signal processing. However, the handling semantics in signal() are handled differently from system to system. On the other hand, sigaction() is a function that allows the user to handle the semantics of process handling exactly the way they want on Posix-compliant systems. Additionally, this function is hard to use because it requires the user to enter entries of a structure. To overcome this, the Signal() funtion that is provided already calls sigaction() for the user. 

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

    Runs "callq" at the end

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

<<<<<<< HEAD
  
=======
  "jmp" after "callq"
>>>>>>> 8796bae09f994856032a528468d7a5cdabe4f8dd

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?




################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.



